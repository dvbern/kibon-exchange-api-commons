/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.dvbern.kibon.exchange.commons.types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GesuchstellerDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1161442839785216695L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GesuchstellerDTO\",\"namespace\":\"ch.dvbern.kibon.exchange.commons.types\",\"fields\":[{\"name\":\"vorname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nachname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"geschlecht\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"geburtsdatum\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"adresse\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AdresseDTO\",\"fields\":[{\"name\":\"anschrift\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"strasse\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"hausnummer\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"adresszusatz\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plz\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ort\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"land\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gemeinde\",\"type\":{\"type\":\"record\",\"name\":\"GemeindeDTO\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"bfsNummer\",\"type\":[\"null\",\"long\"],\"default\":null}]},\"default\":{\"name\":null,\"bfsNummer\":null}},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"telefon\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"webseite\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<GesuchstellerDTO> ENCODER =
      new BinaryMessageEncoder<GesuchstellerDTO>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GesuchstellerDTO> DECODER =
      new BinaryMessageDecoder<GesuchstellerDTO>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GesuchstellerDTO> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GesuchstellerDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GesuchstellerDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GesuchstellerDTO>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GesuchstellerDTO to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GesuchstellerDTO from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GesuchstellerDTO instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GesuchstellerDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String vorname;
   private java.lang.String nachname;
   private java.lang.String email;
   private java.lang.String geschlecht;
   private java.time.LocalDate geburtsdatum;
   private ch.dvbern.kibon.exchange.commons.types.AdresseDTO adresse;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GesuchstellerDTO() {}

  /**
   * All-args constructor.
   * @param vorname The new value for vorname
   * @param nachname The new value for nachname
   * @param email The new value for email
   * @param geschlecht The new value for geschlecht
   * @param geburtsdatum The new value for geburtsdatum
   * @param adresse The new value for adresse
   */
  public GesuchstellerDTO(java.lang.String vorname, java.lang.String nachname, java.lang.String email, java.lang.String geschlecht, java.time.LocalDate geburtsdatum, ch.dvbern.kibon.exchange.commons.types.AdresseDTO adresse) {
    this.vorname = vorname;
    this.nachname = nachname;
    this.email = email;
    this.geschlecht = geschlecht;
    this.geburtsdatum = geburtsdatum;
    this.adresse = adresse;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vorname;
    case 1: return nachname;
    case 2: return email;
    case 3: return geschlecht;
    case 4: return geburtsdatum;
    case 5: return adresse;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vorname = value$ != null ? value$.toString() : null; break;
    case 1: nachname = value$ != null ? value$.toString() : null; break;
    case 2: email = value$ != null ? value$.toString() : null; break;
    case 3: geschlecht = value$ != null ? value$.toString() : null; break;
    case 4: geburtsdatum = (java.time.LocalDate)value$; break;
    case 5: adresse = (ch.dvbern.kibon.exchange.commons.types.AdresseDTO)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'vorname' field.
   * @return The value of the 'vorname' field.
   */
  public java.lang.String getVorname() {
    return vorname;
  }


  /**
   * Sets the value of the 'vorname' field.
   * @param value the value to set.
   */
  public void setVorname(java.lang.String value) {
    this.vorname = value;
  }

  /**
   * Gets the value of the 'nachname' field.
   * @return The value of the 'nachname' field.
   */
  public java.lang.String getNachname() {
    return nachname;
  }


  /**
   * Sets the value of the 'nachname' field.
   * @param value the value to set.
   */
  public void setNachname(java.lang.String value) {
    this.nachname = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'geschlecht' field.
   * @return The value of the 'geschlecht' field.
   */
  public java.lang.String getGeschlecht() {
    return geschlecht;
  }


  /**
   * Sets the value of the 'geschlecht' field.
   * @param value the value to set.
   */
  public void setGeschlecht(java.lang.String value) {
    this.geschlecht = value;
  }

  /**
   * Gets the value of the 'geburtsdatum' field.
   * @return The value of the 'geburtsdatum' field.
   */
  public java.time.LocalDate getGeburtsdatum() {
    return geburtsdatum;
  }


  /**
   * Sets the value of the 'geburtsdatum' field.
   * @param value the value to set.
   */
  public void setGeburtsdatum(java.time.LocalDate value) {
    this.geburtsdatum = value;
  }

  /**
   * Gets the value of the 'adresse' field.
   * @return The value of the 'adresse' field.
   */
  public ch.dvbern.kibon.exchange.commons.types.AdresseDTO getAdresse() {
    return adresse;
  }


  /**
   * Sets the value of the 'adresse' field.
   * @param value the value to set.
   */
  public void setAdresse(ch.dvbern.kibon.exchange.commons.types.AdresseDTO value) {
    this.adresse = value;
  }

  /**
   * Creates a new GesuchstellerDTO RecordBuilder.
   * @return A new GesuchstellerDTO RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder newBuilder() {
    return new ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder();
  }

  /**
   * Creates a new GesuchstellerDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GesuchstellerDTO RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder newBuilder(ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder other) {
    if (other == null) {
      return new ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder();
    } else {
      return new ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder(other);
    }
  }

  /**
   * Creates a new GesuchstellerDTO RecordBuilder by copying an existing GesuchstellerDTO instance.
   * @param other The existing instance to copy.
   * @return A new GesuchstellerDTO RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder newBuilder(ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO other) {
    if (other == null) {
      return new ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder();
    } else {
      return new ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder(other);
    }
  }

  /**
   * RecordBuilder for GesuchstellerDTO instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GesuchstellerDTO>
    implements org.apache.avro.data.RecordBuilder<GesuchstellerDTO> {

    private java.lang.String vorname;
    private java.lang.String nachname;
    private java.lang.String email;
    private java.lang.String geschlecht;
    private java.time.LocalDate geburtsdatum;
    private ch.dvbern.kibon.exchange.commons.types.AdresseDTO adresse;
    private ch.dvbern.kibon.exchange.commons.types.AdresseDTO.Builder adresseBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vorname)) {
        this.vorname = data().deepCopy(fields()[0].schema(), other.vorname);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nachname)) {
        this.nachname = data().deepCopy(fields()[1].schema(), other.nachname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.geschlecht)) {
        this.geschlecht = data().deepCopy(fields()[3].schema(), other.geschlecht);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.geburtsdatum)) {
        this.geburtsdatum = data().deepCopy(fields()[4].schema(), other.geburtsdatum);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.adresse)) {
        this.adresse = data().deepCopy(fields()[5].schema(), other.adresse);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasAdresseBuilder()) {
        this.adresseBuilder = ch.dvbern.kibon.exchange.commons.types.AdresseDTO.newBuilder(other.getAdresseBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing GesuchstellerDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.vorname)) {
        this.vorname = data().deepCopy(fields()[0].schema(), other.vorname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nachname)) {
        this.nachname = data().deepCopy(fields()[1].schema(), other.nachname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.geschlecht)) {
        this.geschlecht = data().deepCopy(fields()[3].schema(), other.geschlecht);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.geburtsdatum)) {
        this.geburtsdatum = data().deepCopy(fields()[4].schema(), other.geburtsdatum);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.adresse)) {
        this.adresse = data().deepCopy(fields()[5].schema(), other.adresse);
        fieldSetFlags()[5] = true;
      }
      this.adresseBuilder = null;
    }

    /**
      * Gets the value of the 'vorname' field.
      * @return The value.
      */
    public java.lang.String getVorname() {
      return vorname;
    }


    /**
      * Sets the value of the 'vorname' field.
      * @param value The value of 'vorname'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder setVorname(java.lang.String value) {
      validate(fields()[0], value);
      this.vorname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vorname' field has been set.
      * @return True if the 'vorname' field has been set, false otherwise.
      */
    public boolean hasVorname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vorname' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder clearVorname() {
      vorname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nachname' field.
      * @return The value.
      */
    public java.lang.String getNachname() {
      return nachname;
    }


    /**
      * Sets the value of the 'nachname' field.
      * @param value The value of 'nachname'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder setNachname(java.lang.String value) {
      validate(fields()[1], value);
      this.nachname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nachname' field has been set.
      * @return True if the 'nachname' field has been set, false otherwise.
      */
    public boolean hasNachname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nachname' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder clearNachname() {
      nachname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder setEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'geschlecht' field.
      * @return The value.
      */
    public java.lang.String getGeschlecht() {
      return geschlecht;
    }


    /**
      * Sets the value of the 'geschlecht' field.
      * @param value The value of 'geschlecht'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder setGeschlecht(java.lang.String value) {
      validate(fields()[3], value);
      this.geschlecht = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'geschlecht' field has been set.
      * @return True if the 'geschlecht' field has been set, false otherwise.
      */
    public boolean hasGeschlecht() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'geschlecht' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder clearGeschlecht() {
      geschlecht = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'geburtsdatum' field.
      * @return The value.
      */
    public java.time.LocalDate getGeburtsdatum() {
      return geburtsdatum;
    }


    /**
      * Sets the value of the 'geburtsdatum' field.
      * @param value The value of 'geburtsdatum'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder setGeburtsdatum(java.time.LocalDate value) {
      validate(fields()[4], value);
      this.geburtsdatum = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'geburtsdatum' field has been set.
      * @return True if the 'geburtsdatum' field has been set, false otherwise.
      */
    public boolean hasGeburtsdatum() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'geburtsdatum' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder clearGeburtsdatum() {
      geburtsdatum = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'adresse' field.
      * @return The value.
      */
    public ch.dvbern.kibon.exchange.commons.types.AdresseDTO getAdresse() {
      return adresse;
    }


    /**
      * Sets the value of the 'adresse' field.
      * @param value The value of 'adresse'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder setAdresse(ch.dvbern.kibon.exchange.commons.types.AdresseDTO value) {
      validate(fields()[5], value);
      this.adresseBuilder = null;
      this.adresse = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'adresse' field has been set.
      * @return True if the 'adresse' field has been set, false otherwise.
      */
    public boolean hasAdresse() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'adresse' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ch.dvbern.kibon.exchange.commons.types.AdresseDTO.Builder getAdresseBuilder() {
      if (adresseBuilder == null) {
        if (hasAdresse()) {
          setAdresseBuilder(ch.dvbern.kibon.exchange.commons.types.AdresseDTO.newBuilder(adresse));
        } else {
          setAdresseBuilder(ch.dvbern.kibon.exchange.commons.types.AdresseDTO.newBuilder());
        }
      }
      return adresseBuilder;
    }

    /**
     * Sets the Builder instance for the 'adresse' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder setAdresseBuilder(ch.dvbern.kibon.exchange.commons.types.AdresseDTO.Builder value) {
      clearAdresse();
      adresseBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'adresse' field has an active Builder instance
     * @return True if the 'adresse' field has an active Builder instance
     */
    public boolean hasAdresseBuilder() {
      return adresseBuilder != null;
    }

    /**
      * Clears the value of the 'adresse' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.types.GesuchstellerDTO.Builder clearAdresse() {
      adresse = null;
      adresseBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GesuchstellerDTO build() {
      try {
        GesuchstellerDTO record = new GesuchstellerDTO();
        record.vorname = fieldSetFlags()[0] ? this.vorname : (java.lang.String) defaultValue(fields()[0]);
        record.nachname = fieldSetFlags()[1] ? this.nachname : (java.lang.String) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.String) defaultValue(fields()[2]);
        record.geschlecht = fieldSetFlags()[3] ? this.geschlecht : (java.lang.String) defaultValue(fields()[3]);
        record.geburtsdatum = fieldSetFlags()[4] ? this.geburtsdatum : (java.time.LocalDate) defaultValue(fields()[4]);
        if (adresseBuilder != null) {
          try {
            record.adresse = this.adresseBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("adresse"));
            throw e;
          }
        } else {
          record.adresse = fieldSetFlags()[5] ? this.adresse : (ch.dvbern.kibon.exchange.commons.types.AdresseDTO) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GesuchstellerDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<GesuchstellerDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GesuchstellerDTO>
    READER$ = (org.apache.avro.io.DatumReader<GesuchstellerDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










