/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.dvbern.kibon.exchange.commons.institutionclient;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InstitutionClientEventDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6444347110884908990L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstitutionClientEventDTO\",\"namespace\":\"ch.dvbern.kibon.exchange.commons.institutionclient\",\"fields\":[{\"name\":\"institutionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"clientName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"clientType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InstitutionClientEventDTO> ENCODER =
      new BinaryMessageEncoder<InstitutionClientEventDTO>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InstitutionClientEventDTO> DECODER =
      new BinaryMessageDecoder<InstitutionClientEventDTO>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InstitutionClientEventDTO> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InstitutionClientEventDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InstitutionClientEventDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InstitutionClientEventDTO>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InstitutionClientEventDTO to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InstitutionClientEventDTO from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InstitutionClientEventDTO instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InstitutionClientEventDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String institutionId;
   private java.lang.String clientName;
   private java.lang.String clientType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InstitutionClientEventDTO() {}

  /**
   * All-args constructor.
   * @param institutionId The new value for institutionId
   * @param clientName The new value for clientName
   * @param clientType The new value for clientType
   */
  public InstitutionClientEventDTO(java.lang.String institutionId, java.lang.String clientName, java.lang.String clientType) {
    this.institutionId = institutionId;
    this.clientName = clientName;
    this.clientType = clientType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return institutionId;
    case 1: return clientName;
    case 2: return clientType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: institutionId = (java.lang.String)value$; break;
    case 1: clientName = (java.lang.String)value$; break;
    case 2: clientType = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'institutionId' field.
   * @return The value of the 'institutionId' field.
   */
  public java.lang.String getInstitutionId() {
    return institutionId;
  }


  /**
   * Sets the value of the 'institutionId' field.
   * @param value the value to set.
   */
  public void setInstitutionId(java.lang.String value) {
    this.institutionId = value;
  }

  /**
   * Gets the value of the 'clientName' field.
   * @return The value of the 'clientName' field.
   */
  public java.lang.String getClientName() {
    return clientName;
  }


  /**
   * Sets the value of the 'clientName' field.
   * @param value the value to set.
   */
  public void setClientName(java.lang.String value) {
    this.clientName = value;
  }

  /**
   * Gets the value of the 'clientType' field.
   * @return The value of the 'clientType' field.
   */
  public java.lang.String getClientType() {
    return clientType;
  }


  /**
   * Sets the value of the 'clientType' field.
   * @param value the value to set.
   */
  public void setClientType(java.lang.String value) {
    this.clientType = value;
  }

  /**
   * Creates a new InstitutionClientEventDTO RecordBuilder.
   * @return A new InstitutionClientEventDTO RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder newBuilder() {
    return new ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder();
  }

  /**
   * Creates a new InstitutionClientEventDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InstitutionClientEventDTO RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder newBuilder(ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder other) {
    if (other == null) {
      return new ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder();
    } else {
      return new ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder(other);
    }
  }

  /**
   * Creates a new InstitutionClientEventDTO RecordBuilder by copying an existing InstitutionClientEventDTO instance.
   * @param other The existing instance to copy.
   * @return A new InstitutionClientEventDTO RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder newBuilder(ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO other) {
    if (other == null) {
      return new ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder();
    } else {
      return new ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder(other);
    }
  }

  /**
   * RecordBuilder for InstitutionClientEventDTO instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstitutionClientEventDTO>
    implements org.apache.avro.data.RecordBuilder<InstitutionClientEventDTO> {

    private java.lang.String institutionId;
    private java.lang.String clientName;
    private java.lang.String clientType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.institutionId)) {
        this.institutionId = data().deepCopy(fields()[0].schema(), other.institutionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.clientName)) {
        this.clientName = data().deepCopy(fields()[1].schema(), other.clientName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.clientType)) {
        this.clientType = data().deepCopy(fields()[2].schema(), other.clientType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing InstitutionClientEventDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.institutionId)) {
        this.institutionId = data().deepCopy(fields()[0].schema(), other.institutionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.clientName)) {
        this.clientName = data().deepCopy(fields()[1].schema(), other.clientName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.clientType)) {
        this.clientType = data().deepCopy(fields()[2].schema(), other.clientType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'institutionId' field.
      * @return The value.
      */
    public java.lang.String getInstitutionId() {
      return institutionId;
    }


    /**
      * Sets the value of the 'institutionId' field.
      * @param value The value of 'institutionId'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder setInstitutionId(java.lang.String value) {
      validate(fields()[0], value);
      this.institutionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'institutionId' field has been set.
      * @return True if the 'institutionId' field has been set, false otherwise.
      */
    public boolean hasInstitutionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'institutionId' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder clearInstitutionId() {
      institutionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientName' field.
      * @return The value.
      */
    public java.lang.String getClientName() {
      return clientName;
    }


    /**
      * Sets the value of the 'clientName' field.
      * @param value The value of 'clientName'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder setClientName(java.lang.String value) {
      validate(fields()[1], value);
      this.clientName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'clientName' field has been set.
      * @return True if the 'clientName' field has been set, false otherwise.
      */
    public boolean hasClientName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'clientName' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder clearClientName() {
      clientName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientType' field.
      * @return The value.
      */
    public java.lang.String getClientType() {
      return clientType;
    }


    /**
      * Sets the value of the 'clientType' field.
      * @param value The value of 'clientType'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder setClientType(java.lang.String value) {
      validate(fields()[2], value);
      this.clientType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'clientType' field has been set.
      * @return True if the 'clientType' field has been set, false otherwise.
      */
    public boolean hasClientType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'clientType' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institutionclient.InstitutionClientEventDTO.Builder clearClientType() {
      clientType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InstitutionClientEventDTO build() {
      try {
        InstitutionClientEventDTO record = new InstitutionClientEventDTO();
        record.institutionId = fieldSetFlags()[0] ? this.institutionId : (java.lang.String) defaultValue(fields()[0]);
        record.clientName = fieldSetFlags()[1] ? this.clientName : (java.lang.String) defaultValue(fields()[1]);
        record.clientType = fieldSetFlags()[2] ? this.clientType : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InstitutionClientEventDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<InstitutionClientEventDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InstitutionClientEventDTO>
    READER$ = (org.apache.avro.io.DatumReader<InstitutionClientEventDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.institutionId);

    out.writeString(this.clientName);

    out.writeString(this.clientType);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.institutionId = in.readString();

      this.clientName = in.readString();

      this.clientType = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.institutionId = in.readString();
          break;

        case 1:
          this.clientName = in.readString();
          break;

        case 2:
          this.clientType = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










