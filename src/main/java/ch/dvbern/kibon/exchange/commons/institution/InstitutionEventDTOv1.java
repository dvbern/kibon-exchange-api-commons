/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.dvbern.kibon.exchange.commons.institution;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InstitutionEventDTOv1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7191863570612625665L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstitutionEventDTOv1\",\"namespace\":\"ch.dvbern.kibon.exchange.commons.institution\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"traegerschaft\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"adresse\",\"type\":{\"type\":\"record\",\"name\":\"AdresseDTO\",\"fields\":[{\"name\":\"strasse\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"hausnummer\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"adresszusatz\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"plz\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ort\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"land\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InstitutionEventDTOv1> ENCODER =
      new BinaryMessageEncoder<InstitutionEventDTOv1>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InstitutionEventDTOv1> DECODER =
      new BinaryMessageDecoder<InstitutionEventDTOv1>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InstitutionEventDTOv1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InstitutionEventDTOv1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InstitutionEventDTOv1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InstitutionEventDTOv1>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InstitutionEventDTOv1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InstitutionEventDTOv1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InstitutionEventDTOv1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InstitutionEventDTOv1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String id;
   private java.lang.String name;
   private java.lang.String traegerschaft;
   private ch.dvbern.kibon.exchange.commons.institution.AdresseDTO adresse;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InstitutionEventDTOv1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param traegerschaft The new value for traegerschaft
   * @param adresse The new value for adresse
   */
  public InstitutionEventDTOv1(java.lang.String id, java.lang.String name, java.lang.String traegerschaft, ch.dvbern.kibon.exchange.commons.institution.AdresseDTO adresse) {
    this.id = id;
    this.name = name;
    this.traegerschaft = traegerschaft;
    this.adresse = adresse;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return traegerschaft;
    case 3: return adresse;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: traegerschaft = value$ != null ? value$.toString() : null; break;
    case 3: adresse = (ch.dvbern.kibon.exchange.commons.institution.AdresseDTO)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'traegerschaft' field.
   * @return The value of the 'traegerschaft' field.
   */
  public java.lang.String getTraegerschaft() {
    return traegerschaft;
  }


  /**
   * Sets the value of the 'traegerschaft' field.
   * @param value the value to set.
   */
  public void setTraegerschaft(java.lang.String value) {
    this.traegerschaft = value;
  }

  /**
   * Gets the value of the 'adresse' field.
   * @return The value of the 'adresse' field.
   */
  public ch.dvbern.kibon.exchange.commons.institution.AdresseDTO getAdresse() {
    return adresse;
  }


  /**
   * Sets the value of the 'adresse' field.
   * @param value the value to set.
   */
  public void setAdresse(ch.dvbern.kibon.exchange.commons.institution.AdresseDTO value) {
    this.adresse = value;
  }

  /**
   * Creates a new InstitutionEventDTOv1 RecordBuilder.
   * @return A new InstitutionEventDTOv1 RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder newBuilder() {
    return new ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder();
  }

  /**
   * Creates a new InstitutionEventDTOv1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InstitutionEventDTOv1 RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder newBuilder(ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder other) {
    if (other == null) {
      return new ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder();
    } else {
      return new ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder(other);
    }
  }

  /**
   * Creates a new InstitutionEventDTOv1 RecordBuilder by copying an existing InstitutionEventDTOv1 instance.
   * @param other The existing instance to copy.
   * @return A new InstitutionEventDTOv1 RecordBuilder
   */
  public static ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder newBuilder(ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1 other) {
    if (other == null) {
      return new ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder();
    } else {
      return new ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder(other);
    }
  }

  /**
   * RecordBuilder for InstitutionEventDTOv1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstitutionEventDTOv1>
    implements org.apache.avro.data.RecordBuilder<InstitutionEventDTOv1> {

    private java.lang.String id;
    private java.lang.String name;
    private java.lang.String traegerschaft;
    private ch.dvbern.kibon.exchange.commons.institution.AdresseDTO adresse;
    private ch.dvbern.kibon.exchange.commons.institution.AdresseDTO.Builder adresseBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.traegerschaft)) {
        this.traegerschaft = data().deepCopy(fields()[2].schema(), other.traegerschaft);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.adresse)) {
        this.adresse = data().deepCopy(fields()[3].schema(), other.adresse);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasAdresseBuilder()) {
        this.adresseBuilder = ch.dvbern.kibon.exchange.commons.institution.AdresseDTO.newBuilder(other.getAdresseBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing InstitutionEventDTOv1 instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.traegerschaft)) {
        this.traegerschaft = data().deepCopy(fields()[2].schema(), other.traegerschaft);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.adresse)) {
        this.adresse = data().deepCopy(fields()[3].schema(), other.adresse);
        fieldSetFlags()[3] = true;
      }
      this.adresseBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'traegerschaft' field.
      * @return The value.
      */
    public java.lang.String getTraegerschaft() {
      return traegerschaft;
    }


    /**
      * Sets the value of the 'traegerschaft' field.
      * @param value The value of 'traegerschaft'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder setTraegerschaft(java.lang.String value) {
      validate(fields()[2], value);
      this.traegerschaft = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'traegerschaft' field has been set.
      * @return True if the 'traegerschaft' field has been set, false otherwise.
      */
    public boolean hasTraegerschaft() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'traegerschaft' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder clearTraegerschaft() {
      traegerschaft = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'adresse' field.
      * @return The value.
      */
    public ch.dvbern.kibon.exchange.commons.institution.AdresseDTO getAdresse() {
      return adresse;
    }


    /**
      * Sets the value of the 'adresse' field.
      * @param value The value of 'adresse'.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder setAdresse(ch.dvbern.kibon.exchange.commons.institution.AdresseDTO value) {
      validate(fields()[3], value);
      this.adresseBuilder = null;
      this.adresse = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'adresse' field has been set.
      * @return True if the 'adresse' field has been set, false otherwise.
      */
    public boolean hasAdresse() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'adresse' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ch.dvbern.kibon.exchange.commons.institution.AdresseDTO.Builder getAdresseBuilder() {
      if (adresseBuilder == null) {
        if (hasAdresse()) {
          setAdresseBuilder(ch.dvbern.kibon.exchange.commons.institution.AdresseDTO.newBuilder(adresse));
        } else {
          setAdresseBuilder(ch.dvbern.kibon.exchange.commons.institution.AdresseDTO.newBuilder());
        }
      }
      return adresseBuilder;
    }

    /**
     * Sets the Builder instance for the 'adresse' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder setAdresseBuilder(ch.dvbern.kibon.exchange.commons.institution.AdresseDTO.Builder value) {
      clearAdresse();
      adresseBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'adresse' field has an active Builder instance
     * @return True if the 'adresse' field has an active Builder instance
     */
    public boolean hasAdresseBuilder() {
      return adresseBuilder != null;
    }

    /**
      * Clears the value of the 'adresse' field.
      * @return This builder.
      */
    public ch.dvbern.kibon.exchange.commons.institution.InstitutionEventDTOv1.Builder clearAdresse() {
      adresse = null;
      adresseBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InstitutionEventDTOv1 build() {
      try {
        InstitutionEventDTOv1 record = new InstitutionEventDTOv1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.traegerschaft = fieldSetFlags()[2] ? this.traegerschaft : (java.lang.String) defaultValue(fields()[2]);
        if (adresseBuilder != null) {
          try {
            record.adresse = this.adresseBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("adresse"));
            throw e;
          }
        } else {
          record.adresse = fieldSetFlags()[3] ? this.adresse : (ch.dvbern.kibon.exchange.commons.institution.AdresseDTO) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InstitutionEventDTOv1>
    WRITER$ = (org.apache.avro.io.DatumWriter<InstitutionEventDTOv1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InstitutionEventDTOv1>
    READER$ = (org.apache.avro.io.DatumReader<InstitutionEventDTOv1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.name);

    if (this.traegerschaft == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.traegerschaft);
    }

    this.adresse.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.name = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.traegerschaft = null;
      } else {
        this.traegerschaft = in.readString();
      }

      if (this.adresse == null) {
        this.adresse = new ch.dvbern.kibon.exchange.commons.institution.AdresseDTO();
      }
      this.adresse.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.name = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.traegerschaft = null;
          } else {
            this.traegerschaft = in.readString();
          }
          break;

        case 3:
          if (this.adresse == null) {
            this.adresse = new ch.dvbern.kibon.exchange.commons.institution.AdresseDTO();
          }
          this.adresse.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










